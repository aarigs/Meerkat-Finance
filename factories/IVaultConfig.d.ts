/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVaultConfigInterface extends ethers.utils.Interface {
  functions: {
    "acceptDebt(address)": FunctionFragment;
    "getFairLaunchAddr()": FunctionFragment;
    "getInterestRate(uint256,uint256)": FunctionFragment;
    "getKillBps()": FunctionFragment;
    "getReservePoolBps()": FunctionFragment;
    "getWNativeRelayer()": FunctionFragment;
    "getWrappedNativeAddr()": FunctionFragment;
    "isWorker(address)": FunctionFragment;
    "killFactor(address,uint256)": FunctionFragment;
    "minDebtSize()": FunctionFragment;
    "workFactor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFairLaunchAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKillBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservePoolBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWNativeRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedNativeAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isWorker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "killFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workFactor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFairLaunchAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKillBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReservePoolBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWNativeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedNativeAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWorker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killFactor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDebtSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workFactor", data: BytesLike): Result;

  events: {};
}

export class IVaultConfig extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVaultConfigInterface;

  functions: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<[string]>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKillBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getKillBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservePoolBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<[string]>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<[string]>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<[string]>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<[string]>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDebtSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptDebt(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

  "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<string>;

  getInterestRate(
    debt: BigNumberish,
    floating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getInterestRate(uint256,uint256)"(
    debt: BigNumberish,
    floating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

  "getWNativeRelayer()"(overrides?: CallOverrides): Promise<string>;

  getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

  "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<string>;

  isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

  "isWorker(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "killFactor(address,uint256)"(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  workFactor(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "workFactor(address,uint256)"(
    worker: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<string>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<string>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<string>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<string>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<string>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<string>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<boolean>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    acceptDebt(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getFairLaunchAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    "getWNativeRelayer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWrappedNativeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getWrappedNativeAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWorker(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDebt(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptDebt(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFairLaunchAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFairLaunchAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKillBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getKillBps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReservePoolBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReservePoolBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWNativeRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWNativeRelayer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWrappedNativeAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWrappedNativeAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWorker(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWorker(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "killFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebtSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    workFactor(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workFactor(address,uint256)"(
      worker: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
