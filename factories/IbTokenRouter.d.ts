/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IbTokenRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "alpaca()": FunctionFragment;
    "ibToken()": FunctionFragment;
    "ibTokenForExactToken(uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityToken(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "swapAlpacaForExactToken(uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactAlpacaForToken(uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactTokenForAlpaca(uint256,uint256,address,uint256)": FunctionFragment;
    "swapTokenForExactAlpaca(uint256,uint256,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityTwoSidesOptimal",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityTwoSidesOptimalToken",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "alpaca", values?: undefined): string;
  encodeFunctionData(functionFragment: "ibToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ibTokenForExactToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAllAlpaca",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityToken",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapAlpacaForExactToken",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAlpacaForToken",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForAlpaca",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForExactAlpaca",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityTwoSidesOptimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityTwoSidesOptimalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "alpaca", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ibToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ibTokenForExactToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAllAlpaca",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAlpacaForExactToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAlpacaForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForAlpaca",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForExactAlpaca",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class IbTokenRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IbTokenRouterInterface;

  functions: {
    addLiquidityToken(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityTwoSidesOptimal(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)"(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityTwoSidesOptimalToken(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    alpaca(overrides?: CallOverrides): Promise<[string]>;

    "alpaca()"(overrides?: CallOverrides): Promise<[string]>;

    ibToken(overrides?: CallOverrides): Promise<[string]>;

    "ibToken()"(overrides?: CallOverrides): Promise<[string]>;

    ibTokenForExactToken(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ibTokenForExactToken(uint256)"(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidityAllAlpaca(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityToken(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityToken(uint256,uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    swapAlpacaForExactToken(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapAlpacaForExactToken(uint256,uint256,address,uint256)"(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactAlpacaForToken(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactAlpacaForToken(uint256,uint256,address,uint256)"(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactTokenForAlpaca(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactTokenForAlpaca(uint256,uint256,address,uint256)"(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokenForExactAlpaca(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenForExactAlpaca(uint256,uint256,address,uint256)"(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidityToken(
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountAlpacaMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)"(
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountAlpacaMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityTwoSidesOptimal(
    amountIbTokenDesired: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountLPMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)"(
    amountIbTokenDesired: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountLPMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityTwoSidesOptimalToken(
    amountTokenDesired: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountLPMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)"(
    amountTokenDesired: BigNumberish,
    amountAlpacaDesired: BigNumberish,
    amountLPMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  alpaca(overrides?: CallOverrides): Promise<string>;

  "alpaca()"(overrides?: CallOverrides): Promise<string>;

  ibToken(overrides?: CallOverrides): Promise<string>;

  "ibToken()"(overrides?: CallOverrides): Promise<string>;

  ibTokenForExactToken(
    amountToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ibTokenForExactToken(uint256)"(
    amountToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _router: string,
    _token: string,
    _ibToken: string,
    _alpaca: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    _router: string,
    _token: string,
    _ibToken: string,
    _alpaca: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeLiquidityAllAlpaca(
    liquidity: BigNumberish,
    amountAlpacaMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)"(
    liquidity: BigNumberish,
    amountAlpacaMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityToken(
    liquidity: BigNumberish,
    amountAlpacaMin: BigNumberish,
    amountTokenMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityToken(uint256,uint256,uint256,address,uint256)"(
    liquidity: BigNumberish,
    amountAlpacaMin: BigNumberish,
    amountTokenMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  swapAlpacaForExactToken(
    amountAlpacaIn: BigNumberish,
    exactTokenOut: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapAlpacaForExactToken(uint256,uint256,address,uint256)"(
    amountAlpacaIn: BigNumberish,
    exactTokenOut: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactAlpacaForToken(
    exactAlpacaIn: BigNumberish,
    amountTokenOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactAlpacaForToken(uint256,uint256,address,uint256)"(
    exactAlpacaIn: BigNumberish,
    amountTokenOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactTokenForAlpaca(
    amountExactTokenIn: BigNumberish,
    amountAlpacaOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactTokenForAlpaca(uint256,uint256,address,uint256)"(
    amountExactTokenIn: BigNumberish,
    amountAlpacaOutMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokenForExactAlpaca(
    amountTokenIn: BigNumberish,
    exactAlpacaOut: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenForExactAlpaca(uint256,uint256,address,uint256)"(
    amountTokenIn: BigNumberish,
    exactAlpacaOut: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidityToken(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountAlpaca: BigNumber;
        amountToken: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountAlpaca: BigNumber;
        amountToken: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityTwoSidesOptimal(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)"(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityTwoSidesOptimalToken(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alpaca(overrides?: CallOverrides): Promise<string>;

    "alpaca()"(overrides?: CallOverrides): Promise<string>;

    ibToken(overrides?: CallOverrides): Promise<string>;

    "ibToken()"(overrides?: CallOverrides): Promise<string>;

    ibTokenForExactToken(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ibTokenForExactToken(uint256)"(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address)"(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeLiquidityAllAlpaca(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityToken(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountAlpaca: BigNumber;
        amountToken: BigNumber;
      }
    >;

    "removeLiquidityToken(uint256,uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountAlpaca: BigNumber;
        amountToken: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    swapAlpacaForExactToken(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapAlpacaForExactToken(uint256,uint256,address,uint256)"(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactAlpacaForToken(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactAlpacaForToken(uint256,uint256,address,uint256)"(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokenForAlpaca(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokenForAlpaca(uint256,uint256,address,uint256)"(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokenForExactAlpaca(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokenForExactAlpaca(uint256,uint256,address,uint256)"(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addLiquidityToken(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityTwoSidesOptimal(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)"(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityTwoSidesOptimalToken(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    alpaca(overrides?: CallOverrides): Promise<BigNumber>;

    "alpaca()"(overrides?: CallOverrides): Promise<BigNumber>;

    ibToken(overrides?: CallOverrides): Promise<BigNumber>;

    "ibToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    ibTokenForExactToken(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ibTokenForExactToken(uint256)"(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityAllAlpaca(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityToken(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityToken(uint256,uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapAlpacaForExactToken(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapAlpacaForExactToken(uint256,uint256,address,uint256)"(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactAlpacaForToken(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactAlpacaForToken(uint256,uint256,address,uint256)"(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactTokenForAlpaca(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactTokenForAlpaca(uint256,uint256,address,uint256)"(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokenForExactAlpaca(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenForExactAlpaca(uint256,uint256,address,uint256)"(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityToken(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityToken(uint256,uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityTwoSidesOptimal(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)"(
      amountIbTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityTwoSidesOptimalToken(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityTwoSidesOptimalToken(uint256,uint256,uint256,address,uint256)"(
      amountTokenDesired: BigNumberish,
      amountAlpacaDesired: BigNumberish,
      amountLPMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    alpaca(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "alpaca()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ibToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ibToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ibTokenForExactToken(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ibTokenForExactToken(uint256)"(
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      _router: string,
      _token: string,
      _ibToken: string,
      _alpaca: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidityAllAlpaca(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityAllAlpaca(uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityToken(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityToken(uint256,uint256,uint256,address,uint256)"(
      liquidity: BigNumberish,
      amountAlpacaMin: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAlpacaForExactToken(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapAlpacaForExactToken(uint256,uint256,address,uint256)"(
      amountAlpacaIn: BigNumberish,
      exactTokenOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactAlpacaForToken(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactAlpacaForToken(uint256,uint256,address,uint256)"(
      exactAlpacaIn: BigNumberish,
      amountTokenOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactTokenForAlpaca(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactTokenForAlpaca(uint256,uint256,address,uint256)"(
      amountExactTokenIn: BigNumberish,
      amountAlpacaOutMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokenForExactAlpaca(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenForExactAlpaca(uint256,uint256,address,uint256)"(
      amountTokenIn: BigNumberish,
      exactAlpacaOut: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
